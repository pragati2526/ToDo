{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n  invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n  invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n  invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n  invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n  invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n  invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n  if (allowArray && Array.isArray(type)) {\n    type.forEach(function (t) {\n      return validateType(t, false);\n    });\n    return;\n  }\n\n  invariant(typeof type === 'string' || _typeof(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}","map":{"version":3,"sources":["/Users/pragatisingh/Desktop/ToDo/ToDo/ToDo/node_modules/dnd-core/dist/esm/contracts.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","invariant","validateSourceContract","source","canDrag","beginDrag","endDrag","validateTargetContract","target","canDrop","hover","drop","validateType","type","allowArray","Array","isArray","forEach","t"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,SAASK,SAAT,QAA0B,sBAA1B;AACA,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7CF,EAAAA,SAAS,CAAC,OAAOE,MAAM,CAACC,OAAd,KAA0B,UAA3B,EAAuC,oCAAvC,CAAT;AACAH,EAAAA,SAAS,CAAC,OAAOE,MAAM,CAACE,SAAd,KAA4B,UAA7B,EAAyC,sCAAzC,CAAT;AACAJ,EAAAA,SAAS,CAAC,OAAOE,MAAM,CAACG,OAAd,KAA0B,UAA3B,EAAuC,oCAAvC,CAAT;AACD;AACD,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7CP,EAAAA,SAAS,CAAC,OAAOO,MAAM,CAACC,OAAd,KAA0B,UAA3B,EAAuC,oCAAvC,CAAT;AACAR,EAAAA,SAAS,CAAC,OAAOO,MAAM,CAACE,KAAd,KAAwB,UAAzB,EAAqC,kCAArC,CAAT;AACAT,EAAAA,SAAS,CAAC,OAAOO,MAAM,CAACG,IAAd,KAAuB,UAAxB,EAAoC,sCAApC,CAAT;AACD;AACD,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,UAA5B,EAAwC;AAC7C,MAAIA,UAAU,IAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAlB,EAAuC;AACrCA,IAAAA,IAAI,CAACI,OAAL,CAAa,UAAUC,CAAV,EAAa;AACxB,aAAON,YAAY,CAACM,CAAD,EAAI,KAAJ,CAAnB;AACD,KAFD;AAGA;AACD;;AAEDjB,EAAAA,SAAS,CAAC,OAAOY,IAAP,KAAgB,QAAhB,IAA4BlB,OAAO,CAACkB,IAAD,CAAP,KAAkB,QAA/C,EAAyDC,UAAU,GAAG,6DAAH,GAAmE,wCAAtI,CAAT;AACD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { invariant } from '@react-dnd/invariant';\nexport function validateSourceContract(source) {\n  invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');\n  invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');\n  invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');\n}\nexport function validateTargetContract(target) {\n  invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');\n  invariant(typeof target.hover === 'function', 'Expected hover to be a function.');\n  invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');\n}\nexport function validateType(type, allowArray) {\n  if (allowArray && Array.isArray(type)) {\n    type.forEach(function (t) {\n      return validateType(t, false);\n    });\n    return;\n  }\n\n  invariant(typeof type === 'string' || _typeof(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');\n}"]},"metadata":{},"sourceType":"module"}