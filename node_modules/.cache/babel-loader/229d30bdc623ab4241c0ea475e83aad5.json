{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { registerSource, DragSourceMonitorImpl, SourceConnector } from '../internals';\nimport { checkDecoratorArguments, isPlainObject, isValidType } from './utils';\nimport { decorateHandler } from './decorateHandler';\nimport { createSourceFactory } from './createSourceFactory';\n/**\n * Decorates a component as a dragsource\n * @param type The dragsource type\n * @param spec The drag source specification\n * @param collect The props collector function\n * @param options DnD options\n */\n\nexport function DragSource(type, spec, collect) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  checkDecoratorArguments('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\n  var getType = type;\n\n  if (typeof type !== 'function') {\n    invariant(isValidType(type), 'Expected \"type\" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', type);\n\n    getType = function getType() {\n      return type;\n    };\n  }\n\n  invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', spec);\n  var createSource = createSourceFactory(spec);\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  return function decorateSource(DecoratedComponent) {\n    return decorateHandler({\n      containerDisplayName: 'DragSource',\n      createHandler: createSource,\n      registerHandler: registerSource,\n      createConnector: function createConnector(backend) {\n        return new SourceConnector(backend);\n      },\n      createMonitor: function createMonitor(manager) {\n        return new DragSourceMonitorImpl(manager);\n      },\n      DecoratedComponent: DecoratedComponent,\n      getType: getType,\n      collect: collect,\n      options: options\n    });\n  };\n}","map":{"version":3,"sources":["/Users/pragatisingh/Desktop/ToDo/ToDo/ToDo/node_modules/react-dnd/dist/esm/decorators/DragSource.js"],"names":["invariant","registerSource","DragSourceMonitorImpl","SourceConnector","checkDecoratorArguments","isPlainObject","isValidType","decorateHandler","createSourceFactory","DragSource","type","spec","collect","options","arguments","length","undefined","getType","createSource","decorateSource","DecoratedComponent","containerDisplayName","createHandler","registerHandler","createConnector","backend","createMonitor","manager"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,cAAT,EAAyBC,qBAAzB,EAAgDC,eAAhD,QAAuE,cAAvE;AACA,SAASC,uBAAT,EAAkCC,aAAlC,EAAiDC,WAAjD,QAAoE,SAApE;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AAC9C,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACAV,EAAAA,uBAAuB,CAAC,YAAD,EAAe,gCAAf,EAAiDM,IAAjD,EAAuDC,IAAvD,EAA6DC,OAA7D,EAAsEC,OAAtE,CAAvB;AACA,MAAII,OAAO,GAAGP,IAAd;;AAEA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9BV,IAAAA,SAAS,CAACM,WAAW,CAACI,IAAD,CAAZ,EAAoB,wEAAwE,yEAAxE,GAAoJ,wBAApJ,GAA+K,sEAAnM,EAA2QA,IAA3Q,CAAT;;AAEAO,IAAAA,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC3B,aAAOP,IAAP;AACD,KAFD;AAGD;;AAEDV,EAAAA,SAAS,CAACK,aAAa,CAACM,IAAD,CAAd,EAAsB,yEAAyE,wCAAzE,GAAoH,sEAA1I,EAAkNA,IAAlN,CAAT;AACA,MAAIO,YAAY,GAAGV,mBAAmB,CAACG,IAAD,CAAtC;AACAX,EAAAA,SAAS,CAAC,OAAOY,OAAP,KAAmB,UAApB,EAAgC,2EAA2E,6DAA3E,GAA2I,wBAA3I,GAAsK,sEAAtM,EAA8QA,OAA9Q,CAAT;AACAZ,EAAAA,SAAS,CAACK,aAAa,CAACQ,OAAD,CAAd,EAAyB,4EAA4E,iCAA5E,GAAgH,wBAAhH,GAA2I,sEAApK,EAA4OD,OAA5O,CAAT;AACA,SAAO,SAASO,cAAT,CAAwBC,kBAAxB,EAA4C;AACjD,WAAOb,eAAe,CAAC;AACrBc,MAAAA,oBAAoB,EAAE,YADD;AAErBC,MAAAA,aAAa,EAAEJ,YAFM;AAGrBK,MAAAA,eAAe,EAAEtB,cAHI;AAIrBuB,MAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACjD,eAAO,IAAItB,eAAJ,CAAoBsB,OAApB,CAAP;AACD,OANoB;AAOrBC,MAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,eAAO,IAAIzB,qBAAJ,CAA0ByB,OAA1B,CAAP;AACD,OAToB;AAUrBP,MAAAA,kBAAkB,EAAEA,kBAVC;AAWrBH,MAAAA,OAAO,EAAEA,OAXY;AAYrBL,MAAAA,OAAO,EAAEA,OAZY;AAarBC,MAAAA,OAAO,EAAEA;AAbY,KAAD,CAAtB;AAeD,GAhBD;AAiBD","sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { registerSource, DragSourceMonitorImpl, SourceConnector } from '../internals';\nimport { checkDecoratorArguments, isPlainObject, isValidType } from './utils';\nimport { decorateHandler } from './decorateHandler';\nimport { createSourceFactory } from './createSourceFactory';\n/**\n * Decorates a component as a dragsource\n * @param type The dragsource type\n * @param spec The drag source specification\n * @param collect The props collector function\n * @param options DnD options\n */\n\nexport function DragSource(type, spec, collect) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  checkDecoratorArguments('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);\n  var getType = type;\n\n  if (typeof type !== 'function') {\n    invariant(isValidType(type), 'Expected \"type\" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', type);\n\n    getType = function getType() {\n      return type;\n    };\n  }\n\n  invariant(isPlainObject(spec), 'Expected \"spec\" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', spec);\n  var createSource = createSourceFactory(spec);\n  invariant(typeof collect === 'function', 'Expected \"collect\" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  invariant(isPlainObject(options), 'Expected \"options\" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source', collect);\n  return function decorateSource(DecoratedComponent) {\n    return decorateHandler({\n      containerDisplayName: 'DragSource',\n      createHandler: createSource,\n      registerHandler: registerSource,\n      createConnector: function createConnector(backend) {\n        return new SourceConnector(backend);\n      },\n      createMonitor: function createMonitor(manager) {\n        return new DragSourceMonitorImpl(manager);\n      },\n      DecoratedComponent: DecoratedComponent,\n      getType: getType,\n      collect: collect,\n      options: options\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}