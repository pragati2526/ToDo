{"ast":null,"code":"import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry';\nimport { areArraysEqual } from '../utils/equality';\nimport { NONE, ALL } from '../utils/dirtiness';\nimport { xor } from '../utils/js_utils';\nexport function reduce() {\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\n\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HOVER:\n      break;\n\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n\n  var _action$payload = action.payload,\n      _action$payload$targe = _action$payload.targetIds,\n      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\n      _action$payload$prevT = _action$payload.prevTargetIds,\n      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\n  var result = xor(targetIds, prevTargetIds);\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n\n  if (!didChange) {\n    return NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  var innermostTargetId = targetIds[targetIds.length - 1];\n\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/pragatisingh/Desktop/ToDo/ToDo/ToDo/node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js"],"names":["BEGIN_DRAG","PUBLISH_DRAG_SOURCE","HOVER","END_DRAG","DROP","ADD_SOURCE","ADD_TARGET","REMOVE_SOURCE","REMOVE_TARGET","areArraysEqual","NONE","ALL","xor","reduce","_state","arguments","length","undefined","action","type","_action$payload","payload","_action$payload$targe","targetIds","_action$payload$prevT","prevTargetIds","result","didChange","prevInnermostTargetId","innermostTargetId","push"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,mBAArB,EAA0CC,KAA1C,EAAiDC,QAAjD,EAA2DC,IAA3D,QAAuE,qBAAvE;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,qBAArE;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,OAAO,SAASC,MAAT,GAAkB;AACvB,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEL,IAAjF;;AAEA,MAAIQ,MAAM,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD;;AAEA,UAAQC,MAAM,CAACC,IAAf;AACE,SAAKjB,KAAL;AACE;;AAEF,SAAKG,UAAL;AACA,SAAKC,UAAL;AACA,SAAKE,aAAL;AACA,SAAKD,aAAL;AACE,aAAOG,IAAP;;AAEF,SAAKV,UAAL;AACA,SAAKC,mBAAL;AACA,SAAKE,QAAL;AACA,SAAKC,IAAL;AACA;AACE,aAAOO,GAAP;AAfJ;;AAkBA,MAAIS,eAAe,GAAGF,MAAM,CAACG,OAA7B;AAAA,MACIC,qBAAqB,GAAGF,eAAe,CAACG,SAD5C;AAAA,MAEIA,SAAS,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAFxD;AAAA,MAGIE,qBAAqB,GAAGJ,eAAe,CAACK,aAH5C;AAAA,MAIIA,aAAa,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAJ5D;AAKA,MAAIE,MAAM,GAAGd,GAAG,CAACW,SAAD,EAAYE,aAAZ,CAAhB;AACA,MAAIE,SAAS,GAAGD,MAAM,CAACV,MAAP,GAAgB,CAAhB,IAAqB,CAACP,cAAc,CAACc,SAAD,EAAYE,aAAZ,CAApD;;AAEA,MAAI,CAACE,SAAL,EAAgB;AACd,WAAOjB,IAAP;AACD,GAjCsB,CAiCrB;AACF;;;AAGA,MAAIkB,qBAAqB,GAAGH,aAAa,CAACA,aAAa,CAACT,MAAd,GAAuB,CAAxB,CAAzC;AACA,MAAIa,iBAAiB,GAAGN,SAAS,CAACA,SAAS,CAACP,MAAV,GAAmB,CAApB,CAAjC;;AAEA,MAAIY,qBAAqB,KAAKC,iBAA9B,EAAiD;AAC/C,QAAID,qBAAJ,EAA2B;AACzBF,MAAAA,MAAM,CAACI,IAAP,CAAYF,qBAAZ;AACD;;AAED,QAAIC,iBAAJ,EAAuB;AACrBH,MAAAA,MAAM,CAACI,IAAP,CAAYD,iBAAZ;AACD;AACF;;AAED,SAAOH,MAAP;AACD","sourcesContent":["import { BEGIN_DRAG, PUBLISH_DRAG_SOURCE, HOVER, END_DRAG, DROP } from '../actions/dragDrop';\nimport { ADD_SOURCE, ADD_TARGET, REMOVE_SOURCE, REMOVE_TARGET } from '../actions/registry';\nimport { areArraysEqual } from '../utils/equality';\nimport { NONE, ALL } from '../utils/dirtiness';\nimport { xor } from '../utils/js_utils';\nexport function reduce() {\n  var _state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NONE;\n\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HOVER:\n      break;\n\n    case ADD_SOURCE:\n    case ADD_TARGET:\n    case REMOVE_TARGET:\n    case REMOVE_SOURCE:\n      return NONE;\n\n    case BEGIN_DRAG:\n    case PUBLISH_DRAG_SOURCE:\n    case END_DRAG:\n    case DROP:\n    default:\n      return ALL;\n  }\n\n  var _action$payload = action.payload,\n      _action$payload$targe = _action$payload.targetIds,\n      targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,\n      _action$payload$prevT = _action$payload.prevTargetIds,\n      prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;\n  var result = xor(targetIds, prevTargetIds);\n  var didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);\n\n  if (!didChange) {\n    return NONE;\n  } // Check the target ids at the innermost position. If they are valid, add them\n  // to the result\n\n\n  var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];\n  var innermostTargetId = targetIds[targetIds.length - 1];\n\n  if (prevInnermostTargetId !== innermostTargetId) {\n    if (prevInnermostTargetId) {\n      result.push(prevInnermostTargetId);\n    }\n\n    if (innermostTargetId) {\n      result.push(innermostTargetId);\n    }\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}