{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource as _addSource, addTarget as _addTarget, removeSource as _removeSource, removeTarget as _removeTarget } from '../actions/registry';\nimport { getNextUniqueId } from '../utils/getNextUniqueId';\nimport { HandlerRole } from '../interfaces';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts';\nimport { asap } from '@react-dnd/asap';\n\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId().toString();\n\n  switch (role) {\n    case HandlerRole.SOURCE:\n      return \"S\".concat(id);\n\n    case HandlerRole.TARGET:\n      return \"T\".concat(id);\n\n    default:\n      throw new Error(\"Unknown Handler Role: \".concat(role));\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return HandlerRole.SOURCE;\n\n    case 'T':\n      return HandlerRole.TARGET;\n\n    default:\n      invariant(false, \"Cannot parse handler ID: \".concat(handlerId));\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n\n  do {\n    var _entries$next = entries.next(),\n        done = _entries$next.done,\n        _entries$next$value = _slicedToArray(_entries$next.value, 2),\n        value = _entries$next$value[1];\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nexport var HandlerRegistryImpl = /*#__PURE__*/function () {\n  function HandlerRegistryImpl(store) {\n    _classCallCheck(this, HandlerRegistryImpl);\n\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n  _createClass(HandlerRegistryImpl, [{\n    key: \"addSource\",\n    value: function addSource(type, source) {\n      validateType(type);\n      validateSourceContract(source);\n      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n      this.store.dispatch(_addSource(sourceId));\n      return sourceId;\n    }\n  }, {\n    key: \"addTarget\",\n    value: function addTarget(type, target) {\n      validateType(type, true);\n      validateTargetContract(target);\n      var targetId = this.addHandler(HandlerRole.TARGET, type, target);\n      this.store.dispatch(_addTarget(targetId));\n      return targetId;\n    }\n  }, {\n    key: \"containsHandler\",\n    value: function containsHandler(handler) {\n      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceId) {\n      var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      var isPinned = includePinned && sourceId === this.pinnedSourceId;\n      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n      return source;\n    }\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.dropTargets.get(targetId);\n    }\n  }, {\n    key: \"getSourceType\",\n    value: function getSourceType(sourceId) {\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      return this.types.get(sourceId);\n    }\n  }, {\n    key: \"getTargetType\",\n    value: function getTargetType(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.types.get(targetId);\n    }\n  }, {\n    key: \"isSourceId\",\n    value: function isSourceId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.SOURCE;\n    }\n  }, {\n    key: \"isTargetId\",\n    value: function isTargetId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.TARGET;\n    }\n  }, {\n    key: \"removeSource\",\n    value: function removeSource(sourceId) {\n      var _this = this;\n\n      invariant(this.getSource(sourceId), 'Expected an existing source.');\n      this.store.dispatch(_removeSource(sourceId));\n      asap(function () {\n        _this.dragSources.delete(sourceId);\n\n        _this.types.delete(sourceId);\n      });\n    }\n  }, {\n    key: \"removeTarget\",\n    value: function removeTarget(targetId) {\n      invariant(this.getTarget(targetId), 'Expected an existing target.');\n      this.store.dispatch(_removeTarget(targetId));\n      this.dropTargets.delete(targetId);\n      this.types.delete(targetId);\n    }\n  }, {\n    key: \"pinSource\",\n    value: function pinSource(sourceId) {\n      var source = this.getSource(sourceId);\n      invariant(source, 'Expected an existing source.');\n      this.pinnedSourceId = sourceId;\n      this.pinnedSource = source;\n    }\n  }, {\n    key: \"unpinSource\",\n    value: function unpinSource() {\n      invariant(this.pinnedSource, 'No source is pinned at the time.');\n      this.pinnedSourceId = null;\n      this.pinnedSource = null;\n    }\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(role, type, handler) {\n      var id = getNextHandlerId(role);\n      this.types.set(id, type);\n\n      if (role === HandlerRole.SOURCE) {\n        this.dragSources.set(id, handler);\n      } else if (role === HandlerRole.TARGET) {\n        this.dropTargets.set(id, handler);\n      }\n\n      return id;\n    }\n  }]);\n\n  return HandlerRegistryImpl;\n}();","map":{"version":3,"sources":["/Users/pragatisingh/Desktop/ToDo/ToDo/ToDo/node_modules/dnd-core/dist/esm/classes/HandlerRegistryImpl.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","o","minLen","_arrayLikeToArray","n","toString","call","slice","constructor","name","Array","from","test","len","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","invariant","addSource","_addSource","addTarget","_addTarget","removeSource","_removeSource","removeTarget","_removeTarget","getNextUniqueId","HandlerRole","validateSourceContract","validateTargetContract","validateType","asap","getNextHandlerId","role","id","SOURCE","concat","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","_entries$next","_entries$next$value","HandlerRegistryImpl","store","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","type","source","sourceId","addHandler","dispatch","targetId","containsHandler","handler","getSource","includePinned","arguments","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","_this","delete","pinSource","unpinSource","set"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource as _addSource, addTarget as _addTarget, removeSource as _removeSource, removeTarget as _removeTarget } from '../actions/registry';\nimport { getNextUniqueId } from '../utils/getNextUniqueId';\nimport { HandlerRole } from '../interfaces';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts';\nimport { asap } from '@react-dnd/asap';\n\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId().toString();\n\n  switch (role) {\n    case HandlerRole.SOURCE:\n      return \"S\".concat(id);\n\n    case HandlerRole.TARGET:\n      return \"T\".concat(id);\n\n    default:\n      throw new Error(\"Unknown Handler Role: \".concat(role));\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return HandlerRole.SOURCE;\n\n    case 'T':\n      return HandlerRole.TARGET;\n\n    default:\n      invariant(false, \"Cannot parse handler ID: \".concat(handlerId));\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n\n  do {\n    var _entries$next = entries.next(),\n        done = _entries$next.done,\n        _entries$next$value = _slicedToArray(_entries$next.value, 2),\n        value = _entries$next$value[1];\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nexport var HandlerRegistryImpl = /*#__PURE__*/function () {\n  function HandlerRegistryImpl(store) {\n    _classCallCheck(this, HandlerRegistryImpl);\n\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n  _createClass(HandlerRegistryImpl, [{\n    key: \"addSource\",\n    value: function addSource(type, source) {\n      validateType(type);\n      validateSourceContract(source);\n      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n      this.store.dispatch(_addSource(sourceId));\n      return sourceId;\n    }\n  }, {\n    key: \"addTarget\",\n    value: function addTarget(type, target) {\n      validateType(type, true);\n      validateTargetContract(target);\n      var targetId = this.addHandler(HandlerRole.TARGET, type, target);\n      this.store.dispatch(_addTarget(targetId));\n      return targetId;\n    }\n  }, {\n    key: \"containsHandler\",\n    value: function containsHandler(handler) {\n      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceId) {\n      var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      var isPinned = includePinned && sourceId === this.pinnedSourceId;\n      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n      return source;\n    }\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.dropTargets.get(targetId);\n    }\n  }, {\n    key: \"getSourceType\",\n    value: function getSourceType(sourceId) {\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      return this.types.get(sourceId);\n    }\n  }, {\n    key: \"getTargetType\",\n    value: function getTargetType(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.types.get(targetId);\n    }\n  }, {\n    key: \"isSourceId\",\n    value: function isSourceId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.SOURCE;\n    }\n  }, {\n    key: \"isTargetId\",\n    value: function isTargetId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.TARGET;\n    }\n  }, {\n    key: \"removeSource\",\n    value: function removeSource(sourceId) {\n      var _this = this;\n\n      invariant(this.getSource(sourceId), 'Expected an existing source.');\n      this.store.dispatch(_removeSource(sourceId));\n      asap(function () {\n        _this.dragSources.delete(sourceId);\n\n        _this.types.delete(sourceId);\n      });\n    }\n  }, {\n    key: \"removeTarget\",\n    value: function removeTarget(targetId) {\n      invariant(this.getTarget(targetId), 'Expected an existing target.');\n      this.store.dispatch(_removeTarget(targetId));\n      this.dropTargets.delete(targetId);\n      this.types.delete(targetId);\n    }\n  }, {\n    key: \"pinSource\",\n    value: function pinSource(sourceId) {\n      var source = this.getSource(sourceId);\n      invariant(source, 'Expected an existing source.');\n      this.pinnedSourceId = sourceId;\n      this.pinnedSource = source;\n    }\n  }, {\n    key: \"unpinSource\",\n    value: function unpinSource() {\n      invariant(this.pinnedSource, 'No source is pinned at the time.');\n      this.pinnedSourceId = null;\n      this.pinnedSource = null;\n    }\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(role, type, handler) {\n      var id = getNextHandlerId(role);\n      this.types.set(id, type);\n\n      if (role === HandlerRole.SOURCE) {\n        this.dragSources.set(id, handler);\n      } else if (role === HandlerRole.TARGET) {\n        this.dropTargets.set(id, handler);\n      }\n\n      return id;\n    }\n  }]);\n\n  return HandlerRegistryImpl;\n}();"]},"metadata":{},"sourceType":"module"}