{"ast":null,"code":"/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nexport { invariant };","map":{"version":3,"sources":["../src/index.ts"],"names":["invariant","condition","format","args","process","error","argIndex"],"mappings":"AAAA;;;;;;;;;;AAWA,SAAgBA,SAAhB,CAA0BC,SAA1B,EAA0CC,MAA1C,EAA0CA;oCAAmBC,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,GAAAA,CAAAA,GAAAA,IAAAA,GAAAA,CAAAA,GAAAA,CAAAA,C,EAAAA,IAAAA,GAAAA,C,EAAAA,IAAAA,GAAAA,I,EAAAA,IAAAA,E,EAAAA;AAAAA,IAAAA,IAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;;MACvDC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;QACrCF,MAAM,KAAV,S,EAA0B;YAClB,IAAA,KAAA,CAAN,8CAAM,C;;;;MAIN,CAAJ,S,EAAgB;QACd,K;;QACIA,MAAM,KAAV,S,EAA0B;AACxBG,MAAAA,KAAK,GAAG,IAAA,KAAA,CACN,uEADFA,6DAAQ,CAARA;AADF,K,MAKO;UACDC,QAAQ,GAAZ,C;AACAD,MAAAA,KAAK,GAAG,IAAA,KAAA,CACN,MAAM,CAAN,OAAA,CAAA,KAAA,EAAsB,YAAA;eACbF,IAAI,CAACG,QAAZ,EAAW,C;AAFfD,OACE,CADM,CAARA;AAKAA,MAAAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;;;AAGDA,IAAAA,KAAa,CAAbA,WAAAA,GAjBa,CAiBbA,CAjBa,CAAA;;UAkBd,K","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nexport function invariant(condition: any, format: string, ...args: any[]) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    let error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n          'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    (error as any).framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}