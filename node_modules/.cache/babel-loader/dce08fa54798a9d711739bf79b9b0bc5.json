{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { wrapConnectorHooks } from './wrapConnectorHooks';\nimport { isRef } from './isRef';\nimport { shallowEqual } from '@react-dnd/shallowequal';\nexport var SourceConnector = /*#__PURE__*/function () {\n  // The drop target may either be attached via ref or connect function\n  // The drag preview may either be attached via ref or connect function\n  function SourceConnector(backend) {\n    var _this = this;\n\n    _classCallCheck(this, SourceConnector);\n\n    _defineProperty(this, \"hooks\", wrapConnectorHooks({\n      dragSource: function dragSource(node, options) {\n        _this.clearDragSource();\n\n        _this.dragSourceOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragSourceRef = node;\n        } else {\n          _this.dragSourceNode = node;\n        }\n\n        _this.reconnectDragSource();\n      },\n      dragPreview: function dragPreview(node, options) {\n        _this.clearDragPreview();\n\n        _this.dragPreviewOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragPreviewRef = node;\n        } else {\n          _this.dragPreviewNode = node;\n        }\n\n        _this.reconnectDragPreview();\n      }\n    }));\n\n    _defineProperty(this, \"handlerId\", null);\n\n    _defineProperty(this, \"dragSourceRef\", null);\n\n    _defineProperty(this, \"dragSourceNode\", void 0);\n\n    _defineProperty(this, \"dragSourceOptionsInternal\", null);\n\n    _defineProperty(this, \"dragSourceUnsubscribe\", void 0);\n\n    _defineProperty(this, \"dragPreviewRef\", null);\n\n    _defineProperty(this, \"dragPreviewNode\", void 0);\n\n    _defineProperty(this, \"dragPreviewOptionsInternal\", null);\n\n    _defineProperty(this, \"dragPreviewUnsubscribe\", void 0);\n\n    _defineProperty(this, \"lastConnectedHandlerId\", null);\n\n    _defineProperty(this, \"lastConnectedDragSource\", null);\n\n    _defineProperty(this, \"lastConnectedDragSourceOptions\", null);\n\n    _defineProperty(this, \"lastConnectedDragPreview\", null);\n\n    _defineProperty(this, \"lastConnectedDragPreviewOptions\", null);\n\n    _defineProperty(this, \"backend\", void 0);\n\n    this.backend = backend;\n  }\n\n  _createClass(SourceConnector, [{\n    key: \"receiveHandlerId\",\n    value: function receiveHandlerId(newHandlerId) {\n      if (this.handlerId === newHandlerId) {\n        return;\n      }\n\n      this.handlerId = newHandlerId;\n      this.reconnect();\n    }\n  }, {\n    key: \"connectTarget\",\n    get: function get() {\n      return this.dragSource;\n    }\n  }, {\n    key: \"dragSourceOptions\",\n    get: function get() {\n      return this.dragSourceOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragSourceOptionsInternal = options;\n    }\n  }, {\n    key: \"dragPreviewOptions\",\n    get: function get() {\n      return this.dragPreviewOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragPreviewOptionsInternal = options;\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      this.reconnectDragSource();\n      this.reconnectDragPreview();\n    }\n  }, {\n    key: \"reconnectDragSource\",\n    value: function reconnectDragSource() {\n      var dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n      var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragSource();\n      }\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dragSource) {\n        this.lastConnectedDragSource = dragSource;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragSource = dragSource;\n        this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n        this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n      }\n    }\n  }, {\n    key: \"reconnectDragPreview\",\n    value: function reconnectDragPreview() {\n      var dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n      var didChange = this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragPreview();\n      }\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dragPreview) {\n        this.lastConnectedDragPreview = dragPreview;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragPreview = dragPreview;\n        this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n        this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n      }\n    }\n  }, {\n    key: \"didHandlerIdChange\",\n    value: function didHandlerIdChange() {\n      return this.lastConnectedHandlerId !== this.handlerId;\n    }\n  }, {\n    key: \"didConnectedDragSourceChange\",\n    value: function didConnectedDragSourceChange() {\n      return this.lastConnectedDragSource !== this.dragSource;\n    }\n  }, {\n    key: \"didConnectedDragPreviewChange\",\n    value: function didConnectedDragPreviewChange() {\n      return this.lastConnectedDragPreview !== this.dragPreview;\n    }\n  }, {\n    key: \"didDragSourceOptionsChange\",\n    value: function didDragSourceOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n    }\n  }, {\n    key: \"didDragPreviewOptionsChange\",\n    value: function didDragPreviewOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n    }\n  }, {\n    key: \"disconnectDragSource\",\n    value: function disconnectDragSource() {\n      if (this.dragSourceUnsubscribe) {\n        this.dragSourceUnsubscribe();\n        this.dragSourceUnsubscribe = undefined;\n      }\n    }\n  }, {\n    key: \"disconnectDragPreview\",\n    value: function disconnectDragPreview() {\n      if (this.dragPreviewUnsubscribe) {\n        this.dragPreviewUnsubscribe();\n        this.dragPreviewUnsubscribe = undefined;\n        this.dragPreviewNode = null;\n        this.dragPreviewRef = null;\n      }\n    }\n  }, {\n    key: \"dragSource\",\n    get: function get() {\n      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n    }\n  }, {\n    key: \"dragPreview\",\n    get: function get() {\n      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n    }\n  }, {\n    key: \"clearDragSource\",\n    value: function clearDragSource() {\n      this.dragSourceNode = null;\n      this.dragSourceRef = null;\n    }\n  }, {\n    key: \"clearDragPreview\",\n    value: function clearDragPreview() {\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }]);\n\n  return SourceConnector;\n}();","map":{"version":3,"sources":["/Users/pragatisingh/Desktop/ToDo/ToDo/ToDo/node_modules/react-dnd/dist/esm/internals/SourceConnector.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_defineProperty","obj","value","wrapConnectorHooks","isRef","shallowEqual","SourceConnector","backend","_this","dragSource","node","options","clearDragSource","dragSourceOptions","dragSourceRef","dragSourceNode","reconnectDragSource","dragPreview","clearDragPreview","dragPreviewOptions","dragPreviewRef","dragPreviewNode","reconnectDragPreview","receiveHandlerId","newHandlerId","handlerId","reconnect","get","dragSourceOptionsInternal","set","dragPreviewOptionsInternal","didChange","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","lastConnectedDragSource","lastConnectedHandlerId","lastConnectedDragSourceOptions","dragSourceUnsubscribe","connectDragSource","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","lastConnectedDragPreview","lastConnectedDragPreviewOptions","dragPreviewUnsubscribe","connectDragPreview","undefined","current"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { wrapConnectorHooks } from './wrapConnectorHooks';\nimport { isRef } from './isRef';\nimport { shallowEqual } from '@react-dnd/shallowequal';\nexport var SourceConnector = /*#__PURE__*/function () {\n  // The drop target may either be attached via ref or connect function\n  // The drag preview may either be attached via ref or connect function\n  function SourceConnector(backend) {\n    var _this = this;\n\n    _classCallCheck(this, SourceConnector);\n\n    _defineProperty(this, \"hooks\", wrapConnectorHooks({\n      dragSource: function dragSource(node, options) {\n        _this.clearDragSource();\n\n        _this.dragSourceOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragSourceRef = node;\n        } else {\n          _this.dragSourceNode = node;\n        }\n\n        _this.reconnectDragSource();\n      },\n      dragPreview: function dragPreview(node, options) {\n        _this.clearDragPreview();\n\n        _this.dragPreviewOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragPreviewRef = node;\n        } else {\n          _this.dragPreviewNode = node;\n        }\n\n        _this.reconnectDragPreview();\n      }\n    }));\n\n    _defineProperty(this, \"handlerId\", null);\n\n    _defineProperty(this, \"dragSourceRef\", null);\n\n    _defineProperty(this, \"dragSourceNode\", void 0);\n\n    _defineProperty(this, \"dragSourceOptionsInternal\", null);\n\n    _defineProperty(this, \"dragSourceUnsubscribe\", void 0);\n\n    _defineProperty(this, \"dragPreviewRef\", null);\n\n    _defineProperty(this, \"dragPreviewNode\", void 0);\n\n    _defineProperty(this, \"dragPreviewOptionsInternal\", null);\n\n    _defineProperty(this, \"dragPreviewUnsubscribe\", void 0);\n\n    _defineProperty(this, \"lastConnectedHandlerId\", null);\n\n    _defineProperty(this, \"lastConnectedDragSource\", null);\n\n    _defineProperty(this, \"lastConnectedDragSourceOptions\", null);\n\n    _defineProperty(this, \"lastConnectedDragPreview\", null);\n\n    _defineProperty(this, \"lastConnectedDragPreviewOptions\", null);\n\n    _defineProperty(this, \"backend\", void 0);\n\n    this.backend = backend;\n  }\n\n  _createClass(SourceConnector, [{\n    key: \"receiveHandlerId\",\n    value: function receiveHandlerId(newHandlerId) {\n      if (this.handlerId === newHandlerId) {\n        return;\n      }\n\n      this.handlerId = newHandlerId;\n      this.reconnect();\n    }\n  }, {\n    key: \"connectTarget\",\n    get: function get() {\n      return this.dragSource;\n    }\n  }, {\n    key: \"dragSourceOptions\",\n    get: function get() {\n      return this.dragSourceOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragSourceOptionsInternal = options;\n    }\n  }, {\n    key: \"dragPreviewOptions\",\n    get: function get() {\n      return this.dragPreviewOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragPreviewOptionsInternal = options;\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      this.reconnectDragSource();\n      this.reconnectDragPreview();\n    }\n  }, {\n    key: \"reconnectDragSource\",\n    value: function reconnectDragSource() {\n      var dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n      var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragSource();\n      }\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dragSource) {\n        this.lastConnectedDragSource = dragSource;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragSource = dragSource;\n        this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n        this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n      }\n    }\n  }, {\n    key: \"reconnectDragPreview\",\n    value: function reconnectDragPreview() {\n      var dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n      var didChange = this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragPreview();\n      }\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dragPreview) {\n        this.lastConnectedDragPreview = dragPreview;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragPreview = dragPreview;\n        this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n        this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n      }\n    }\n  }, {\n    key: \"didHandlerIdChange\",\n    value: function didHandlerIdChange() {\n      return this.lastConnectedHandlerId !== this.handlerId;\n    }\n  }, {\n    key: \"didConnectedDragSourceChange\",\n    value: function didConnectedDragSourceChange() {\n      return this.lastConnectedDragSource !== this.dragSource;\n    }\n  }, {\n    key: \"didConnectedDragPreviewChange\",\n    value: function didConnectedDragPreviewChange() {\n      return this.lastConnectedDragPreview !== this.dragPreview;\n    }\n  }, {\n    key: \"didDragSourceOptionsChange\",\n    value: function didDragSourceOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n    }\n  }, {\n    key: \"didDragPreviewOptionsChange\",\n    value: function didDragPreviewOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n    }\n  }, {\n    key: \"disconnectDragSource\",\n    value: function disconnectDragSource() {\n      if (this.dragSourceUnsubscribe) {\n        this.dragSourceUnsubscribe();\n        this.dragSourceUnsubscribe = undefined;\n      }\n    }\n  }, {\n    key: \"disconnectDragPreview\",\n    value: function disconnectDragPreview() {\n      if (this.dragPreviewUnsubscribe) {\n        this.dragPreviewUnsubscribe();\n        this.dragPreviewUnsubscribe = undefined;\n        this.dragPreviewNode = null;\n        this.dragPreviewRef = null;\n      }\n    }\n  }, {\n    key: \"dragSource\",\n    get: function get() {\n      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n    }\n  }, {\n    key: \"dragPreview\",\n    get: function get() {\n      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n    }\n  }, {\n    key: \"clearDragSource\",\n    value: function clearDragSource() {\n      this.dragSourceNode = null;\n      this.dragSourceRef = null;\n    }\n  }, {\n    key: \"clearDragPreview\",\n    value: function clearDragPreview() {\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }]);\n\n  return SourceConnector;\n}();"]},"metadata":{},"sourceType":"module"}